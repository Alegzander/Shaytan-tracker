<?php

/**
 * This is the model base class for the table "torrent_meta".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "TorrentMeta".
 *
 * Columns in table "torrent_meta" available as properties of the model,
 * followed by relations of table "torrent_meta" available as properties of the model.
 *
 * @property string $torrent_id
 * @property string $created_by
 * @property string $creation_date
 * @property string $comment
 * @property integer $total_seeds
 * @property integer $total_leachers
 * @property integer $total_downloaded
 * @property string $tags
 * @property integer $raiting
 * @property integer $total_comments
 * @property string $last_comment_date
 * @property string $last_comment_responder
 *
 * @property Torrent $torrent
 */
abstract class BaseTorrentMeta extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'torrent_meta';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'TorrentMeta|TorrentMetas', $n);
	}

	public static function representingColumn() {
		return 'created_by';
	}

	public function rules() {
		return array(
			array('torrent_id', 'required'),
			array('total_seeds, total_leachers, total_downloaded, raiting, total_comments', 'numerical', 'integerOnly'=>true),
			array('torrent_id', 'length', 'max'=>11),
			array('created_by', 'length', 'max'=>100),
			array('tags', 'length', 'max'=>256),
			array('last_comment_responder', 'length', 'max'=>45),
			array('creation_date, comment, last_comment_date', 'safe'),
			array('created_by, creation_date, comment, total_seeds, total_leachers, total_downloaded, tags, raiting, total_comments, last_comment_date, last_comment_responder', 'default', 'setOnEmpty' => true, 'value' => null),
			array('torrent_id, created_by, creation_date, comment, total_seeds, total_leachers, total_downloaded, tags, raiting, total_comments, last_comment_date, last_comment_responder', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'torrent' => array(self::BELONGS_TO, 'Torrent', 'torrent_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'torrent_id' => null,
			'created_by' => Yii::t('app', 'Created By'),
			'creation_date' => Yii::t('app', 'Creation Date'),
			'comment' => Yii::t('app', 'Comment'),
			'total_seeds' => Yii::t('app', 'Total Seeds'),
			'total_leachers' => Yii::t('app', 'Total Leachers'),
			'total_downloaded' => Yii::t('app', 'Total Downloaded'),
			'tags' => Yii::t('app', 'Tags'),
			'raiting' => Yii::t('app', 'Raiting'),
			'total_comments' => Yii::t('app', 'Total Comments'),
			'last_comment_date' => Yii::t('app', 'Last Comment Date'),
			'last_comment_responder' => Yii::t('app', 'Last Comment Responder'),
			'torrent' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('torrent_id', $this->torrent_id);
		$criteria->compare('created_by', $this->created_by, true);
		$criteria->compare('creation_date', $this->creation_date, true);
		$criteria->compare('comment', $this->comment, true);
		$criteria->compare('total_seeds', $this->total_seeds);
		$criteria->compare('total_leachers', $this->total_leachers);
		$criteria->compare('total_downloaded', $this->total_downloaded);
		$criteria->compare('tags', $this->tags, true);
		$criteria->compare('raiting', $this->raiting);
		$criteria->compare('total_comments', $this->total_comments);
		$criteria->compare('last_comment_date', $this->last_comment_date, true);
		$criteria->compare('last_comment_responder', $this->last_comment_responder, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}